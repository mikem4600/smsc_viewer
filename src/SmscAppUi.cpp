/*
* ============================================================================
*  Name     : CSmscAppUi from SmscAppUi.cpp
*  Part of  : Smsc
*  Created  : 30/7/2003 by Makidis Michael
*  Implementation notes:
*     Initial content was generated by Series 60 AppWizard.
*  Copyright: Makidis Michael 2003-2004
* ============================================================================
*/

// INCLUDE FILES
#include <stringloader.h>  // for StringLoader
#include <avkon.hrh>
#include <Smsc.rsg>
#include "smsc.hrh"
#include "SmscAppUi.h"
#include "SmscView.h"
#include "SmscView2.h"

// ================= MEMBER FUNCTIONS =======================
//
// ----------------------------------------------------------
// CSmscAppUi::ConstructL()
// ?implementation_description
// ----------------------------------------------------------
//
void CSmscAppUi::ConstructL()
    {
    BaseConstructL(
#ifdef SERIES_60_V2
		EAknEnableSkin
#endif
	);

    // Show tabs for main views from resources
    CEikStatusPane* sp = StatusPane();

    // Fetch pointer to the default navi pane control
    iNaviPane = (CAknNavigationControlContainer*)sp->ControlL( 
        TUid::Uid(EEikStatusPaneUidNavi));

    // Tabgroup has been read from resource and it were pushed to the navi pane. 
    // Get pointer to the navigation decorator with the ResourceDecorator() function. 
    // Application owns the decorator and it has responsibility to delete the object.
    iDecoratedTabGroup = iNaviPane->ResourceDecorator();
    if (iDecoratedTabGroup)
        {
        iTabGroup = (CAknTabGroup*) iDecoratedTabGroup->DecoratedControl();
        }

    CSmscView* view1 = new (ELeave) CSmscView;

    CleanupStack::PushL( view1 );
    view1->ConstructL();
    AddViewL( view1 );      // transfer ownership to CAknViewAppUi
    CleanupStack::Pop();    // view1

    CSmscView2* view2 = new (ELeave) CSmscView2;

    CleanupStack::PushL( view2 );
    view2->ConstructL();
    AddViewL( view2 );      // transfer ownership to CAknViewAppUi
    CleanupStack::Pop();    // view2

    SetDefaultViewL(*view1);

    }

// ----------------------------------------------------
// CSmscAppUi::~CSmscAppUi()
// Destructor
// Frees reserved resources
// ----------------------------------------------------
//
CSmscAppUi::~CSmscAppUi()
    {
    delete iDecoratedTabGroup;
   }

// ------------------------------------------------------------------------------
// CSmscAppUi::::DynInitMenuPaneL(TInt aResourceId,CEikMenuPane* aMenuPane)
//  This function is called by the EIKON framework just before it displays
//  a menu pane. Its default implementation is empty, and by overriding it,
//  the application can set the state of menu items dynamically according
//  to the state of application data.
// ------------------------------------------------------------------------------
//
void CSmscAppUi::DynInitMenuPaneL(
    TInt /*aResourceId*/,CEikMenuPane* /*aMenuPane*/)
    {
    }

// ----------------------------------------------------
// CSmscAppUi::HandleKeyEventL(
//     const TKeyEvent& aKeyEvent,TEventCode /*aType*/)
// ?implementation_description
// ----------------------------------------------------
//
TKeyResponse CSmscAppUi::HandleKeyEventL(
    const TKeyEvent& aKeyEvent,TEventCode /*aType*/)
    {
    if ( iTabGroup == NULL )
        {
        return EKeyWasNotConsumed;
        }

    TInt active = iTabGroup->ActiveTabIndex();
    TInt count = iTabGroup->TabCount();

    switch ( aKeyEvent.iCode )
        {
        case EKeyLeftArrow:
            if ( active > 0 )
                {
				// activate the previous tab
                active--;
                iTabGroup->SetActiveTabByIndex( active );
                ActivateLocalViewL(TUid::Uid(iTabGroup->TabIdFromIndex(active)));
                }
            break;
        case EKeyRightArrow:
            if( (active + 1) < count )
                {
				// activate the next tab
                active++;
                iTabGroup->SetActiveTabByIndex( active );
                ActivateLocalViewL(TUid::Uid(iTabGroup->TabIdFromIndex(active)));
                }
            break;
        default:
            return EKeyWasNotConsumed;
            break;
        }

    return EKeyWasConsumed;
    }

// ----------------------------------------------------
// CSmscAppUi::HandleCommandL(TInt aCommand)
// ?implementation_description
// ----------------------------------------------------
//
void CSmscAppUi::HandleCommandL(TInt aCommand)
    {
    switch ( aCommand )
        {
		case EAknSoftkeyExit:
        case EAknCmdExit:
            {
            Exit();
            break;
            }
        case ReturnToMain:
            {
			// activate the first tab
            iTabGroup->SetActiveTabByIndex( 0 );
            ActivateLocalViewL(TUid::Uid(iTabGroup->TabIdFromIndex(0)));
            break;
            }
		case DisplayHelp:
			{
			// activate the second tab
            iTabGroup->SetActiveTabByIndex( 1 );
            ActivateLocalViewL(TUid::Uid(iTabGroup->TabIdFromIndex(1)));
            break;
			}
        default:
            break;      
        }
    }

// End of File  
