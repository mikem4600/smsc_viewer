/*
* ============================================================================
*  Name     : CSmscContainer2 from SmscContainer2.cpp
*  Part of  : Smsc
*  Created  : 30/7/2003 by Makidis Michael
*  Implementation notes:
*     Initial content was generated by Series 60 AppWizard.
*  Copyright: Makidis Michael 2003-2004
* ============================================================================
*/

// INCLUDE FILES
#include <eikedwin.h>  // for CEikEdwin
#include <stringloader.h>  // for StringLoader
#include <SMSC.RSG>
#include "SmscContainer2.h"
#include "Smsc.hrh"

#define EDWIN_POS           TPoint(0, 0)

// ================= MEMBER FUNCTIONS =======================

// ---------------------------------------------------------
// CSmscContainer2::ConstructL(const TRect& aRect)
// EPOC two phased constructor
// ---------------------------------------------------------
//
void CSmscContainer2::ConstructL(const TRect& aRect)
    {
    CreateWindowL();

	// Create the editor
    iEdwin = new (ELeave) CEikEdwin;
    iEdwin->SetContainerWindowL(*this);
	iEdwin->SetAknEditorFlags(EAknEditorFlagEnableScrollBars);
	iEdwin->ConstructL( CEikEdwin::EWidthInPixels |
						CEikEdwin::ELineCursor |
						EEikEdwinDisplayOnly
						, aRect.Width(),1024,7);
	HBufC* textResource = StringLoader::LoadLC(R_SMSC_HELP);

	iEdwin->SetTextL(textResource);

	// Enter the line feeds (based on Forum Nokia Discussion topic)
	CPlainText* textStream = iEdwin->Text();
	const TInt KReturnCharNum = {12}; // 12 = ASCII return sign
	TChar ReturnChar( KReturnCharNum );
	//any sign can be used here as long as its not in the resource string.
	TChar secondChar( '%' );
	TInt i( textResource->Length() -2 );
	while( i >= 0 )
	{
		TChar Char = textResource->operator[]( i );
		//if there are any special chars put them back as returns.
		if( Char == secondChar )
		{
			textStream->DeleteL( i, 1 );
			textStream->InsertL( i, ReturnChar );
		}
		i--;
	}
	
	textStream = 0;
	CleanupStack::PopAndDestroy(textResource);

    SetRect(aRect);
    ActivateL();
	iEdwin->SetCursorPosL(0, EFalse);
	//iEdwin->SetFocus(ETrue);
    }

// Destructor
CSmscContainer2::~CSmscContainer2()
    {
    delete iEdwin;
    }

// ---------------------------------------------------------
// CSmscContainer2::SizeChanged()
// Called by framework when the view size is changed
// ---------------------------------------------------------
//
void CSmscContainer2::SizeChanged()
    {
    iEdwin->SetExtent(EDWIN_POS, iEdwin->MinimumSize());
    }

// ---------------------------------------------------------
// CSmscContainer2::CountComponentControls() const
// ---------------------------------------------------------
//
TInt CSmscContainer2::CountComponentControls() const
    {
    return 1; // return nbr of controls inside this container
    }

// ---------------------------------------------------------
// CSmscContainer2::ComponentControl(TInt aIndex) const
// ---------------------------------------------------------
//
CCoeControl* CSmscContainer2::ComponentControl(TInt aIndex) const
    {
    switch ( aIndex )
        {
        case 0:
            return iEdwin;
        default:
            return NULL;
        }
    }

// ---------------------------------------------------------
// CSmscContainer2::Draw(const TRect& aRect) const
// ---------------------------------------------------------
//
void CSmscContainer2::Draw(const TRect& /*aRect*/) const
    {
    CWindowGc& gc = SystemGc();
	gc.Clear();
    }

// ---------------------------------------------------------
// CSmscContainer2::OfferKeyEventL(...)
// Notify key events to editors.
// ---------------------------------------------------------
//
TKeyResponse CSmscContainer2::OfferKeyEventL(
    const TKeyEvent& aKeyEvent, TEventCode aType)
    {
    if (iEdwin)
        {
        if (aType == EEventKey)
            {
			if (aKeyEvent.iCode == EKeyDownArrow) 
				{
				//iEdwin->MoveCursorL(TCursorPosition::EFPageDown, EFalse);
				// Attempt to correct the scroller behaviour (doesn't really work)
				//if(iEdwin->CursorPos() > iEdwin->Text()->Read(0).Length() - 50) 
					iEdwin->SetCursorPosL(iEdwin->Text()->Read(0).Length()-1, EFalse);
				return EKeyWasConsumed;
				}
			if (aKeyEvent.iCode == EKeyUpArrow)
				{
				//iEdwin->MoveCursorL(TCursorPosition::EFPageUp, EFalse);
				// Attempt to correct the scroller behaviour (doesn't really work)
				//if(iEdwin->CursorPos() < 50) 
					iEdwin->SetCursorPosL(0, EFalse);
				return EKeyWasConsumed;
				}
            }
        }
    return EKeyWasNotConsumed;
    }

// ---------------------------------------------------------
// CSmscContainer2::HandleControlEventL(
//     CCoeControl* aControl,TCoeEvent aEventType)
// ---------------------------------------------------------
//
void CSmscContainer2::HandleControlEventL(
    CCoeControl* /*aControl*/,TCoeEvent /*aEventType*/)
    {
    // No need to add any control event handler code here
    }

// End of File  
